Copyright (c) 2010 TurnKey Linux - all rights reserved

ABOUT
-----

Python turnkey toolkit template, with two example commands
1) printargs # prints list of arguments
2) prog # prints 'prog' not implemented

FEATURES
--------

* integrated help support
(e.g., command docstrings are automatically interpreted by wrapper)

* sourceless installation target
all python modules byte compiled with -OO (strips program of docstrings)

the sourceless python program is executed through a binary execution proxy
	allowing MAC rules to be applied to the toolkit
	prevents python environment manipulation tricks
		tricks that could be used to exploit privileged python apps

* intergrated packaging support
debian/* will be updated when the project is initialized and/or renamed.
at a minimum, the control file needs a description of the project.

* flexible toolkit execution syntax
# lists available commands
project

# runs pylib/cmd_command.py:main()
project command arg1 arg2 ...
project-command arg1 arg2 ...

# if only one command available, this will run it
project arg1 arg2

* wrapper environment setup

automatically sets up pylib into your python path 
automatically sets up libexec into your PATH

* tag-based auto-versioning
calculates program version automatically from the most recent annotated 
git tag in the following format:
	<tag-name>-<revisions-since-tag>-<commit-id[:8]>

If no tags have yet been created, a date based version is calculated:
	YY-MM-DD.<commit-id[:8]>

USAGE
-----

1) remove example dummy commands?
	pylib/cmd_printargs.py
	pylib/cmd_prog.py

2) initialize project?
	make init name=newname

3) update packaging files
	eg. debian/control with depend's and descriptions
	note: see "projectbuilding" for more information

4) add programs to the toolkit as pylib/cmd_<subcmd>.py

5) update links
	make updatelinks

Remember, you can run toolkit commands like this:

	pylib/cmd_<subcmd>.py arg1 arg2 ...
	<progname>-<subcmd> arg1 arg2 ...
	<progname> <subcmd> arg1 arg2 ...

6) documentation / integrated help

Usage:
<progname> # prints list of programs
<progname>-<command> -h # extended help

Notes:
- The first line of the module docstring is the short usage desc.
- commands that have a usage() function, support the -h flag for extended help.
- The help module defines a usage decorator for convenience.
Example usage (see cmd_printargs for an example):

import help
@help.usage(__doc__)
def usage():
	print "Syntax: foo"

Advanced:
Normally, the order of the commands printed by <progname> is
determined by their sort order. If you want to manually tweak with
the order, then list the desired order in COMMANDS_USAGE_ORDER.

Empty string values COMMANDS_USAGE_ORDER symbolize empty lines/seperators.

7) install

make install prefix=...  # prefix defaults to /usr/local

8) uninstall

make uninstall		# prefix defaults to /usr/local

9) tag the latest commit as a versioned release:

# this will ask you for a tag message (which may include release notes)
# and create a tag signed by your GPG key
git-tag -s v1.0.1
